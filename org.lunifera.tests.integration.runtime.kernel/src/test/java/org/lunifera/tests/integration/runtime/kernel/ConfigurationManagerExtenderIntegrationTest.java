/*******************************************************************************
 * Copyright (c) 2013, 2014 C4biz Softwares ME, Loetz KG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Cristiano Gavi√£o - initial API and implementation
 *******************************************************************************/
package org.lunifera.tests.integration.runtime.kernel;

import static org.knowhowlab.osgi.testing.assertions.ServiceAssert.assertServiceAvailable;

import java.io.IOException;
import java.util.Dictionary;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.knowhowlab.osgi.testing.utils.ServiceUtils;
import org.lunifera.runtime.kernel.api.controller.configurations.ConfigurationManagementService;
import org.ops4j.pax.exam.Option;
import org.osgi.framework.Constants;
import org.osgi.framework.InvalidSyntaxException;
import org.osgi.service.cm.Configuration;
import org.osgi.service.cm.ConfigurationAdmin;

public class ConfigurationManagerExtenderIntegrationTest extends
        AbstractIntegrationTest {

    private static final String HELPER_FACTORY_PID = "org.lunifera.runtime.component.configuration.manager.tests.helper";

    @org.ops4j.pax.exam.Configuration
    public static Option[] customTestConfiguration() {
        return baseConfiguration();
    }

    /**
     * Ensures that the externalPid is written into the properties of the
     * configuration.
     * 
     * @throws IOException
     */
    @Test
    public void ensureExternalPidInProperties() throws IOException {

        ConfigurationManagementService cms = ServiceUtils.getService(bc,
                ConfigurationManagementService.class);

        // initialize factory configuration
        cms.initializeFactoryConfigurationStore(HELPER_FACTORY_PID, "1001",
                null);

        String externalPid = (String) findFactoryConfigurations(HELPER_FACTORY_PID)[0]
                .getProperties().get(
                        ConfigurationManagementService.EXTERNAL_PID);
        Assert.assertEquals("1001", externalPid);
    }

    /**
     * Ensures that initializeFactoryConfigurationStore called with the same
     * externalPid twice does not create a new configuration.
     * 
     * @throws IOException
     */
    @Test
    public void ensureFactoryPidAccessByExternalPid() throws IOException {

        ConfigurationManagementService cms = ServiceUtils.getService(bc,
                ConfigurationManagementService.class);

        // test
        Assert.assertEquals(0,
                findFactoryConfigurations(HELPER_FACTORY_PID).length);

        // initialize factory configuration
        String pid = cms.initializeFactoryConfigurationStore(
                HELPER_FACTORY_PID, "1001", null);
        Assert.assertEquals(1,
                findFactoryConfigurations(HELPER_FACTORY_PID).length);

        // access twice
        String pid2 = cms.initializeFactoryConfigurationStore(
                HELPER_FACTORY_PID, "1001", null);

        // the returned PIDs are equal
        Assert.assertEquals(pid, pid2);
        Assert.assertEquals(1,
                findFactoryConfigurations(HELPER_FACTORY_PID).length);
    }

    /**
     * Tests that the PID is automatically generated.
     * 
     * @throws IOException
     */
    @Test
    public void ensureFactoryPidAutoGenerated() throws IOException {
        ConfigurationManagementService cms = ServiceUtils.getService(bc,
                ConfigurationManagementService.class);

        // initialize factory configuration
        String pid = cms.initializeFactoryConfigurationStore(
                HELPER_FACTORY_PID, "1001", null);

        Configuration[] configs = findFactoryConfigurations(HELPER_FACTORY_PID);
        Assert.assertEquals(1, configs.length);

        // the returned PID is not the passed one
        Assert.assertFalse("1001".equals(configs[0].getProperties().get(
                Constants.SERVICE_PID)));
        Assert.assertEquals(pid,
                configs[0].getProperties().get(Constants.SERVICE_PID));
    }

    @Test
    public void ensurePidWasRegistered() {

        ConfigurationManagementService cms = ServiceUtils.getService(bc,
                ConfigurationManagementService.class);
        Dictionary<String, Object> props = cms
                .getProperties("org.eclipse.equinox.http.jetty.config.test");

        Assert.assertNotNull("PID was not registered properly.", props);
        Assert.assertEquals("PID was not registered properly.", "8088",
                props.get("http.port"));
    }

    @Test
    public void ensureServicesWasRegistered() {

        // assert CM service is available
        assertServiceAvailable("CM was not available",
                "org.osgi.service.cm.ConfigurationAdmin");

        // assert Log service is available
        assertServiceAvailable("LogService was not available",
                "org.osgi.service.log.LogService");

        // assert CM wrapper is available
        assertServiceAvailable(
                "CM Wrapper was not available",
                "org.lunifera.runtime.kernel.api.controller.configurations.ConfigurationManagementService");
    }

    /**
     * Looks for all factory configurations for the given factoryPid.
     * 
     * @param factoryPid
     * @return
     * @throws IOException
     */
    protected Configuration[] findFactoryConfigurations(String factoryPid) {
        Configuration[] configs = null;
        // As ConfigurationAdmin.getConfiguration creates the configuration if
        // it is not yet there, we check its existence first
        try {
            String filter = "(service.factoryPid=" + factoryPid + ")";

            ConfigurationAdmin admin = ServiceUtils.getService(bc,
                    ConfigurationAdmin.class);

            configs = admin.listConfigurations(filter);
        } catch (InvalidSyntaxException e) {
            Assert.fail(e.toString());
        } catch (IOException e) {
            Assert.fail(e.toString());
        }

        return configs != null ? configs : new Configuration[0];
    }

    @Before
    public void setup() throws IOException {
        // reset all configurations
        for (Configuration configuration : findFactoryConfigurations(HELPER_FACTORY_PID)) {
            configuration.delete();
        }
    }
}
